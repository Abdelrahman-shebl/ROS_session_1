# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from range_sensors_validator/array_of_accepted_sensors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class array_of_accepted_sensors(genpy.Message):
  _md5sum = "815e7b847ffcd99b54d0077ebd435c82"
  _type = "range_sensors_validator/array_of_accepted_sensors"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32[] Quality_val
float32[] sensor_val
float32[] min_range_val
float32[] max_range_val
float32[] range_val

int32  Quality_val_count
int32  sensor_val_count
int32  min_range_val_count
int32  max_range_val_count
int32  range_val_count
"""
  __slots__ = ['Quality_val','sensor_val','min_range_val','max_range_val','range_val','Quality_val_count','sensor_val_count','min_range_val_count','max_range_val_count','range_val_count']
  _slot_types = ['int32[]','float32[]','float32[]','float32[]','float32[]','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Quality_val,sensor_val,min_range_val,max_range_val,range_val,Quality_val_count,sensor_val_count,min_range_val_count,max_range_val_count,range_val_count

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(array_of_accepted_sensors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Quality_val is None:
        self.Quality_val = []
      if self.sensor_val is None:
        self.sensor_val = []
      if self.min_range_val is None:
        self.min_range_val = []
      if self.max_range_val is None:
        self.max_range_val = []
      if self.range_val is None:
        self.range_val = []
      if self.Quality_val_count is None:
        self.Quality_val_count = 0
      if self.sensor_val_count is None:
        self.sensor_val_count = 0
      if self.min_range_val_count is None:
        self.min_range_val_count = 0
      if self.max_range_val_count is None:
        self.max_range_val_count = 0
      if self.range_val_count is None:
        self.range_val_count = 0
    else:
      self.Quality_val = []
      self.sensor_val = []
      self.min_range_val = []
      self.max_range_val = []
      self.range_val = []
      self.Quality_val_count = 0
      self.sensor_val_count = 0
      self.min_range_val_count = 0
      self.max_range_val_count = 0
      self.range_val_count = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.Quality_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.Quality_val))
      length = len(self.sensor_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.sensor_val))
      length = len(self.min_range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.min_range_val))
      length = len(self.max_range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.max_range_val))
      length = len(self.range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.range_val))
      _x = self
      buff.write(_get_struct_5i().pack(_x.Quality_val_count, _x.sensor_val_count, _x.min_range_val_count, _x.max_range_val_count, _x.range_val_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Quality_val = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_val = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_range_val = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_range_val = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.range_val = s.unpack(str[start:end])
      _x = self
      start = end
      end += 20
      (_x.Quality_val_count, _x.sensor_val_count, _x.min_range_val_count, _x.max_range_val_count, _x.range_val_count,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.Quality_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.Quality_val.tostring())
      length = len(self.sensor_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.sensor_val.tostring())
      length = len(self.min_range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.min_range_val.tostring())
      length = len(self.max_range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.max_range_val.tostring())
      length = len(self.range_val)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.range_val.tostring())
      _x = self
      buff.write(_get_struct_5i().pack(_x.Quality_val_count, _x.sensor_val_count, _x.min_range_val_count, _x.max_range_val_count, _x.range_val_count))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.Quality_val = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sensor_val = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.min_range_val = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.max_range_val = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.range_val = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.Quality_val_count, _x.sensor_val_count, _x.min_range_val_count, _x.max_range_val_count, _x.range_val_count,) = _get_struct_5i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5i = None
def _get_struct_5i():
    global _struct_5i
    if _struct_5i is None:
        _struct_5i = struct.Struct("<5i")
    return _struct_5i
