// Generated by gencpp from file range_sensors_validator/array_of_accepted_sensors.msg
// DO NOT EDIT!


#ifndef RANGE_SENSORS_VALIDATOR_MESSAGE_ARRAY_OF_ACCEPTED_SENSORS_H
#define RANGE_SENSORS_VALIDATOR_MESSAGE_ARRAY_OF_ACCEPTED_SENSORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace range_sensors_validator
{
template <class ContainerAllocator>
struct array_of_accepted_sensors_
{
  typedef array_of_accepted_sensors_<ContainerAllocator> Type;

  array_of_accepted_sensors_()
    : Quality_val()
    , sensor_val()
    , min_range_val()
    , max_range_val()
    , range_val()
    , Quality_val_count(0)
    , sensor_val_count(0)
    , min_range_val_count(0)
    , max_range_val_count(0)
    , range_val_count(0)  {
    }
  array_of_accepted_sensors_(const ContainerAllocator& _alloc)
    : Quality_val(_alloc)
    , sensor_val(_alloc)
    , min_range_val(_alloc)
    , max_range_val(_alloc)
    , range_val(_alloc)
    , Quality_val_count(0)
    , sensor_val_count(0)
    , min_range_val_count(0)
    , max_range_val_count(0)
    , range_val_count(0)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _Quality_val_type;
  _Quality_val_type Quality_val;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _sensor_val_type;
  _sensor_val_type sensor_val;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _min_range_val_type;
  _min_range_val_type min_range_val;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _max_range_val_type;
  _max_range_val_type max_range_val;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _range_val_type;
  _range_val_type range_val;

   typedef int32_t _Quality_val_count_type;
  _Quality_val_count_type Quality_val_count;

   typedef int32_t _sensor_val_count_type;
  _sensor_val_count_type sensor_val_count;

   typedef int32_t _min_range_val_count_type;
  _min_range_val_count_type min_range_val_count;

   typedef int32_t _max_range_val_count_type;
  _max_range_val_count_type max_range_val_count;

   typedef int32_t _range_val_count_type;
  _range_val_count_type range_val_count;





  typedef boost::shared_ptr< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct array_of_accepted_sensors_

typedef ::range_sensors_validator::array_of_accepted_sensors_<std::allocator<void> > array_of_accepted_sensors;

typedef boost::shared_ptr< ::range_sensors_validator::array_of_accepted_sensors > array_of_accepted_sensorsPtr;
typedef boost::shared_ptr< ::range_sensors_validator::array_of_accepted_sensors const> array_of_accepted_sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator1> & lhs, const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator2> & rhs)
{
  return lhs.Quality_val == rhs.Quality_val &&
    lhs.sensor_val == rhs.sensor_val &&
    lhs.min_range_val == rhs.min_range_val &&
    lhs.max_range_val == rhs.max_range_val &&
    lhs.range_val == rhs.range_val &&
    lhs.Quality_val_count == rhs.Quality_val_count &&
    lhs.sensor_val_count == rhs.sensor_val_count &&
    lhs.min_range_val_count == rhs.min_range_val_count &&
    lhs.max_range_val_count == rhs.max_range_val_count &&
    lhs.range_val_count == rhs.range_val_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator1> & lhs, const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace range_sensors_validator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "815e7b847ffcd99b54d0077ebd435c82";
  }

  static const char* value(const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x815e7b847ffcd99bULL;
  static const uint64_t static_value2 = 0x54d0077ebd435c82ULL;
};

template<class ContainerAllocator>
struct DataType< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "range_sensors_validator/array_of_accepted_sensors";
  }

  static const char* value(const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] Quality_val\n"
"float32[] sensor_val\n"
"float32[] min_range_val\n"
"float32[] max_range_val\n"
"float32[] range_val\n"
"\n"
"int32  Quality_val_count\n"
"int32  sensor_val_count\n"
"int32  min_range_val_count\n"
"int32  max_range_val_count\n"
"int32  range_val_count\n"
;
  }

  static const char* value(const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Quality_val);
      stream.next(m.sensor_val);
      stream.next(m.min_range_val);
      stream.next(m.max_range_val);
      stream.next(m.range_val);
      stream.next(m.Quality_val_count);
      stream.next(m.sensor_val_count);
      stream.next(m.min_range_val_count);
      stream.next(m.max_range_val_count);
      stream.next(m.range_val_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct array_of_accepted_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::range_sensors_validator::array_of_accepted_sensors_<ContainerAllocator>& v)
  {
    s << indent << "Quality_val[]" << std::endl;
    for (size_t i = 0; i < v.Quality_val.size(); ++i)
    {
      s << indent << "  Quality_val[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.Quality_val[i]);
    }
    s << indent << "sensor_val[]" << std::endl;
    for (size_t i = 0; i < v.sensor_val.size(); ++i)
    {
      s << indent << "  sensor_val[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sensor_val[i]);
    }
    s << indent << "min_range_val[]" << std::endl;
    for (size_t i = 0; i < v.min_range_val.size(); ++i)
    {
      s << indent << "  min_range_val[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.min_range_val[i]);
    }
    s << indent << "max_range_val[]" << std::endl;
    for (size_t i = 0; i < v.max_range_val.size(); ++i)
    {
      s << indent << "  max_range_val[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.max_range_val[i]);
    }
    s << indent << "range_val[]" << std::endl;
    for (size_t i = 0; i < v.range_val.size(); ++i)
    {
      s << indent << "  range_val[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range_val[i]);
    }
    s << indent << "Quality_val_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Quality_val_count);
    s << indent << "sensor_val_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensor_val_count);
    s << indent << "min_range_val_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.min_range_val_count);
    s << indent << "max_range_val_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_range_val_count);
    s << indent << "range_val_count: ";
    Printer<int32_t>::stream(s, indent + "  ", v.range_val_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGE_SENSORS_VALIDATOR_MESSAGE_ARRAY_OF_ACCEPTED_SENSORS_H
