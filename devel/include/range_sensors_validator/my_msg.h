// Generated by gencpp from file range_sensors_validator/my_msg.msg
// DO NOT EDIT!


#ifndef RANGE_SENSORS_VALIDATOR_MESSAGE_MY_MSG_H
#define RANGE_SENSORS_VALIDATOR_MESSAGE_MY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace range_sensors_validator
{
template <class ContainerAllocator>
struct my_msg_
{
  typedef my_msg_<ContainerAllocator> Type;

  my_msg_()
    : value(0)
    , Quality(0)
    , sensor_values(0.0)  {
    }
  my_msg_(const ContainerAllocator& _alloc)
    : value(0)
    , Quality(0)
    , sensor_values(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _value_type;
  _value_type value;

   typedef int32_t _Quality_type;
  _Quality_type Quality;

   typedef float _sensor_values_type;
  _sensor_values_type sensor_values;





  typedef boost::shared_ptr< ::range_sensors_validator::my_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::range_sensors_validator::my_msg_<ContainerAllocator> const> ConstPtr;

}; // struct my_msg_

typedef ::range_sensors_validator::my_msg_<std::allocator<void> > my_msg;

typedef boost::shared_ptr< ::range_sensors_validator::my_msg > my_msgPtr;
typedef boost::shared_ptr< ::range_sensors_validator::my_msg const> my_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::range_sensors_validator::my_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::range_sensors_validator::my_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::range_sensors_validator::my_msg_<ContainerAllocator1> & lhs, const ::range_sensors_validator::my_msg_<ContainerAllocator2> & rhs)
{
  return lhs.value == rhs.value &&
    lhs.Quality == rhs.Quality &&
    lhs.sensor_values == rhs.sensor_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::range_sensors_validator::my_msg_<ContainerAllocator1> & lhs, const ::range_sensors_validator::my_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace range_sensors_validator

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::range_sensors_validator::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::range_sensors_validator::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::range_sensors_validator::my_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::range_sensors_validator::my_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::range_sensors_validator::my_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::range_sensors_validator::my_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::range_sensors_validator::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf8ae48f0ef46a740aaba88e5b1efc8c";
  }

  static const char* value(const ::range_sensors_validator::my_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf8ae48f0ef46a74ULL;
  static const uint64_t static_value2 = 0x0aaba88e5b1efc8cULL;
};

template<class ContainerAllocator>
struct DataType< ::range_sensors_validator::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "range_sensors_validator/my_msg";
  }

  static const char* value(const ::range_sensors_validator::my_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::range_sensors_validator::my_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 value\n"
"int32 Quality\n"
"float32 sensor_values\n"
;
  }

  static const char* value(const ::range_sensors_validator::my_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::range_sensors_validator::my_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.value);
      stream.next(m.Quality);
      stream.next(m.sensor_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::range_sensors_validator::my_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::range_sensors_validator::my_msg_<ContainerAllocator>& v)
  {
    s << indent << "value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.value);
    s << indent << "Quality: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Quality);
    s << indent << "sensor_values: ";
    Printer<float>::stream(s, indent + "  ", v.sensor_values);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RANGE_SENSORS_VALIDATOR_MESSAGE_MY_MSG_H
